[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rag-system"
version = "1.0.0"
description = "A RAG (Retrieval-Augmented Generation) system with ChromaDB integration"
authors = [
    {name = "RAG System Team", email = "team@rag-system.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "chromadb>=0.4.0",
    "sentence-transformers>=2.2.0",
    "langchain>=0.1.0",
    "langchain-community>=0.0.10",
    "langchain-huggingface>=0.0.5",
    "langchain-chroma>=0.0.5",
    "langchain-openai>=0.0.5",
    "streamlit>=1.28.0",
    "structlog>=23.0.0",
    "python-dotenv>=1.0.0",
    "click>=8.0.0",
    "pypdf>=3.0.0",
    "python-docx>=0.8.11",
    "pandas>=2.0.0",
    "openpyxl>=3.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-watch>=4.2.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "types-requests>=2.31.0",
    "bandit>=1.7.0",
    "autoflake>=2.0.0",
]

[project.scripts]
rag-demo = "rag_system.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["rag_system*"]

[tool.black]
line-length = 79
target-version = ['py312']
include = '\.pyi?$'
exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv.*
  | venv.*
  | build
  | dist
  | .pytest_cache
  | chroma_db
  | rag_cache
  | tests/htmlcov
  | __pycache__
  | .coverage
  | coverage.xml
  | .streamlit
  | rag_system/.*\.egg-info
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["rag_system"]
skip = [".venv*", "venv*", "build", "dist", ".mypy_cache", ".pytest_cache", "chroma_db", "rag_cache", "tests/htmlcov", "__pycache__"]

[tool.mypy]
python_version = "3.12"
exclude = "(venv.*|\\.venv.*|build|dist|\\.mypy_cache|\\.pytest_cache|chroma_db|rag_cache|tests/htmlcov|__pycache__|\\.coverage|coverage.xml|\\.streamlit|rag_system/.*\\.egg-info)"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["rag_system"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv*/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\)\\:",
    "@(abc\\.)?abstractmethod",
] 